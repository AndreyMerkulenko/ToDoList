{"version":3,"sources":["components/Todo.js","components/ToDoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","toggleTask","removeTask","editTask","className","complete","onClick","id","task","ToDoForm","addTask","useState","userInput","setUserInput","handleSubmit","e","preventDefault","onSubmit","value","type","onChange","currentTarget","onKeyDown","key","placeholder","App","todos","setTodos","filter","result","prompt","handleToggle","map","length","newItem","Math","random","toString","substr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAoBiBA,MAlBf,YAA2D,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SAC1C,OACE,sBAAmBC,UAAU,YAA7B,UACA,qBACEA,UAAWJ,EAAKK,SAAW,mBAAqB,YAChDC,QAAS,kBAAML,EAAWD,EAAKO,KAFjC,SAGGP,EAAKQ,OAER,qBAAKJ,UAAU,cAAcE,QAAS,kBAAMJ,EAAWF,EAAKO,KAA5D,eAGA,qBAAKH,UAAU,YAAYE,QAAS,kBAAMH,EAASH,IAAnD,oBATUA,EAAKO,KC+BRE,MAjCf,YAAgC,IAAZC,EAAW,EAAXA,QAClB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAMMC,EAAe,SAACC,GACpBA,EAAEC,iBACFN,EAAQE,GACRC,EAAa,KASf,OACE,uBAAMI,SAAUH,EAAhB,UACE,uBACEI,MAAON,EACPO,KAAK,OACLC,SArBe,SAACL,GACpBF,EAAaE,EAAEM,cAAcH,QAqBzBI,UAZiB,SAACP,GACR,UAAVA,EAAEQ,KACJT,EAAaC,IAWXS,YAAY,mGAEd,gGC6BSC,MAvDf,WACE,MAA0Bd,mBAAS,IAAnC,mBAAOe,EAAP,KAAcC,EAAd,KAaMzB,EAAa,SAACK,GAClBoB,EAAS,YAAID,EAAME,QAAO,SAAC5B,GAAD,OAAUA,EAAKO,KAAOA,QAG5CJ,EAAW,SAACA,GAChB,IAAI0B,EAASC,OAAO,sHAAwB3B,EAASK,MACjDqB,IACF1B,EAASK,KAAOqB,EAChBF,EAAS,YAAID,MAIXK,EAAe,SAACxB,GACpBoB,EAAS,YACJD,EAAMM,KAAI,SAAChC,GAAD,OACXA,EAAKO,KAAOA,EAAZ,2BAAsBP,GAAtB,IAA4BK,UAAWL,EAAKK,WAA5C,eAA8DL,SAKpE,OACE,sBAAKI,UAAU,MAAf,UACE,iCACE,uGAAmBsB,EAAMO,YAE3B,cAAC,EAAD,CAAUvB,QApCE,SAACE,GACf,GAAIA,EAAW,CACb,IAAMsB,EAAU,CACd3B,GAAI4B,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GACzC9B,KAAMI,EACNP,UAAU,GAEZsB,EAAS,GAAD,mBAAKD,GAAL,CAAYQ,SA8BnBR,EAAMM,KAAI,SAAChC,GACV,OACE,cAAC,EAAD,CACEA,KAAMA,EAENC,WAAY8B,EACZ7B,WAAYA,EACZC,SAAUA,GAHLH,EAAKO,WCpCPgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.730682a6.chunk.js","sourcesContent":["  import React from 'react'\r\n  \r\n  function Todo({ todo, toggleTask, removeTask, editTask }) {\r\n      return (\r\n        <div key={todo.id} className=\"item-todo\">\r\n        <div\r\n          className={todo.complete ? 'item-text strike' : 'item-text'}\r\n          onClick={() => toggleTask(todo.id)}>\r\n          {todo.task}\r\n        </div>\r\n        <div className=\"item-delete\" onClick={() => removeTask(todo.id)}>\r\n          X\r\n        </div>\r\n        <div className=\"item-edit\" onClick={() => editTask(todo)}>\r\n          Edit\r\n        </div>\r\n      </div>\r\n      )\r\n  }\r\n  \r\n  export default Todo\r\n  ","import React, { useState } from 'react'\r\n\r\nfunction ToDoForm({ addTask }) {\r\n  const [userInput, setUserInput] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    setUserInput(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addTask(userInput);\r\n    setUserInput('');\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={userInput}\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyPress}\r\n        placeholder=\"Введите значение...\"\r\n      />\r\n      <button>Сохранить</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ToDoForm\r\n","import { useState } from 'react';\nimport Todo from './components/Todo';\nimport ToDoForm from './components/ToDoForm';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const addTask = (userInput) => {\n    if (userInput) {\n      const newItem = {\n        id: Math.random().toString(36).substr(2, 9),\n        task: userInput,\n        complete: false,\n      };\n      setTodos([...todos, newItem]);\n    }\n  };\n\n  const removeTask = (id) => {\n    setTodos([...todos.filter((todo) => todo.id !== id)]);\n  };\n\n  const editTask = (editTask) => {\n    let result = prompt('Редактировать задачу', editTask.task);\n    if (result) {\n      editTask.task = result;\n      setTodos([...todos]);\n    } else return;\n  };\n\n  const handleToggle = (id) => {\n    setTodos([\n      ...todos.map((todo) =>\n        todo.id === id ? { ...todo, complete: !todo.complete } : { ...todo },\n      ),\n    ]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Список задач: {todos.length}</h1>\n      </header>\n      <ToDoForm addTask={addTask} />\n      {todos.map((todo) => {\n        return (\n          <Todo\n            todo={todo}\n            key={todo.id}\n            toggleTask={handleToggle}\n            removeTask={removeTask}\n            editTask={editTask}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}